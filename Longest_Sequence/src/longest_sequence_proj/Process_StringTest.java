package longest_sequence_proj;

import static org.junit.Assert.*;

import org.junit.Test;

public class Process_StringTest {

	
	/**
	 * Test the Process_String method
	 */
	@Test
	public void testExecute() {
		//Send in a string with a trailing space
		String testData = "11,17,5,8,6,4,7,12, 3";
		assertEquals("5, 6, 7, 12", Process_String.execute(testData));
		
		//Send in a string with a trailing comma
		testData = "11,17,5,8,6,4,7,12,3,";
		assertEquals("5, 6, 7, 12", Process_String.execute(testData));
		
		//Send in a string with a trailing spaces
		testData = "11,17,5,8,6,4,7,12,3   ";
		assertEquals("5, 6, 7, 12", Process_String.execute(testData));
		
		//Send in a string with a single integer
		//test1.csv
		testData = "1";
		assertEquals("1", Process_String.execute(testData));
		
		//Send in a single comma
		//test2.csv
		testData = ",";
		assertEquals("", Process_String.execute(testData));
		
		
		//Send in a hundred values
		//test3.csv
		testData = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100";
		assertEquals("1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100", Process_String.execute(testData));
		
		//Send in several hundred values
		//test4.csv
		testData = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98";
		assertEquals("1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100", Process_String.execute(testData));
		
		//Send in several hundred random values
		//test5.csv
		testData = "82,25,27,40,95,84,22,20,49,30,94,84,33,65,87,91,6,86,4,99,15,18,46,72,91,23,13,18,1,95,25,51,58,100,56,64,12,44,5,68,88,93,10,27,21,88,98,93,73,32,15,40,2,68,37,21,16,34,59,64,19,75,70,44,43,3,30,68,70,88,23,5,97,27,26,87,22,63,5,26,22,84,72,47,41,8,40,22,29,23,67,31,73,44,43,3,30,68,70,88,23,5,97,27,26,87,22,63,5,26,22,84,72,47,41,8,40,22,29,23,67,31,73,44,43,3,30,68,70,88,23,5,97,27,26,87,22,63,5,26,22,84,72,47,41,8,40,22,29,23,67,31,73,44,43,3,30,68,70,88,23,5,97,27,26,87,22,63,5,26,22,84,72,47,41,8,40,22,29,23,67,31,73,44,43,3,30,68,70,88,23,5,97,27,26,87,22,63,5,26,22,84,72,47,41,8,40,22,29,23,67,31,73,44,43,3,30,68,70,88,23,5,97,27,26,87,22,63,5,26,22,84,72,47,41,8,40,22,29,23,67,31,73,44,43,3,30,68,70,88,23,5,97,27,26,87,22,63,5,26,22,84,72,47,41,8,40,22,29,23,67,31,73,44,43,3,30,68,70,88,23,5,97,27,26,87,22,63,5,26,22,84,72,47,41,8,40,22,29,23,67,31,73,44,43,3,30,68,70,88,23,5,97,27,26,87,22,63,5,26,22,84,72,47,41,8,40,22,29,23,67,31,73";
		assertEquals("4, 5, 10, 15, 16, 19, 23, 27, 29, 31, 41, 43, 44, 47, 63, 67, 68, 70, 72, 73, 84, 87, 88, 97", Process_String.execute(testData));
		
		//Send in values with spaces instead of commas
		//test6.csv
		testData = "82 25 27 40";
		assertEquals("Possibly missing commas between numbers, file contains: 82 25 27 40", Process_String.execute(testData));

		//Send in a new set of values 
		//test7.csv
		testData = "55,63,47,83,80,63,47,79,7,96,53,55,88,23,63,10,77,39,58,55,58,8,53,38,15,96,8,88,15,31,98,28,77,10,15,1,74,6,90,65,65,27,64,67,61,18,53,64,99,9,38,11,41,41,11,35,98,29,74,45,20,79,97,82,47,66,27,49,86,89,31,92,83,54,37,51,24,30,4,31,24,44,64,10,54,4,55,53,90,91,81,9,33,88,87,70,74,18,94,96,14,84,12,47,70,16,89,99,77,38,44,21,27,83,50,58,71,17,12,83,57,53,50,33,23,48,42,55,57,68,71,26,25,51,58,9,43,93,89,26,28,6,72,30,24,93,10,55,29,78,2,76,35,9,30,44,37,14,94,3,8,41,88,6,69,91,92,40,87,39,53,94,35,29,27,57,25,16,20,55,66,6,53,41,75,30,82,75,87,24,4,95,55,34,43,67,34,50,76,63,69,14,84,79,20,45,12,84,38,65,86";
		assertEquals("7, 8, 10, 15, 18, 20, 27, 30, 31, 33, 38, 44, 50, 53, 55, 57, 68, 71, 72, 78, 88, 91, 92, 94, 95", Process_String.execute(testData));
		
		//Send in one line at a time in a single file with commas
		//test8.csv
		testData = "95,";
		assertEquals("95", Process_String.execute(testData));
		testData = "84,";
		assertEquals("84", Process_String.execute(testData));
		
		//Send in one line at a time in a single file without commas
		//test9.csv
		testData = "95";
		assertEquals("95", Process_String.execute(testData));
		testData = "84";
		assertEquals("84", Process_String.execute(testData));
		
		//Test 100 decreasing numbers
		testData = "101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1";
		assertEquals("101", Process_String.execute(testData));
		
		//Test with negatives
		testData = "-2,-1,55,63,47,83,80,63,47,79,7,96,53,55,88,23,63,10,77,39,58,55,58,8,53,38,15,96,8,88,15,31,98,28,77,10,15,1,74,6,90,65,65,27,64,67,61,18,53,64,99,9,38,11,41,41,11,35,98,29,74,45,20,79,97,82,47,66,27,49,86,89,31,92,83,54,37,51,24,30,4,31,24,44,64,10,54,4,55,53,90,91,81,9,33,88,87,70,74,18,94,96,14,84,12,47,70,16,89,99,77,38,44,21,27,83,50,58,71,17,12,83,57,53,50,33,23,48,42,55,57,68,71,26,25,51,58,9,43,93,89,26,28,6,72,30,24,93,10,55,29,78,2,76,35,9,30,44,37,14,94,3,8,41,88,6,69,91,92,40,87,39,53,94,35,29,27,57,25,16,20,55,66,6,53,41,75,30,82,75,87,24,4,95,55,34,43,67,34,50,76,63,69,14,84,79,20,45,12,84,38,65,86";
		assertEquals("-2, -1, 7, 8, 10, 15, 18, 20, 27, 30, 31, 33, 38, 44, 50, 53, 55, 57, 68, 71, 72, 78, 88, 91, 92, 94, 95",Process_String.execute(testData));
	}
}
